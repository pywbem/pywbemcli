/*
    Model with associations, Indication class, and Experimental
    qualifier declarations to test the --association,
    --indication, and --experimental options
*/

Qualifier Association : boolean = false,
    Scope(association),
    Flavor(DisableOverride, ToSubclass);

Qualifier Description : string = null,
    Scope(any),
    Flavor(EnableOverride, ToSubclass, Translatable);

Qualifier Deprecated : boolean = true,
    Scope(class, association, indication, property, reference, method, parameter),
    Flavor(DisableOverride, ToSubclass);

Qualifier Experimental : boolean = true,
    Scope(any),
    Flavor(EnableOverride, Restricted);

Qualifier Indication : boolean = false,
    Scope(class, indication),
    Flavor(DisableOverride, ToSubclass);

Qualifier Key : boolean = false,
    Scope(property, reference),
    Flavor(DisableOverride, ToSubclass);

class TST_Person{
        [Key, Description ("This is key prop") ]
    string name;
    string extraProperty = "defaultvalue";
};

[Experimental, Description("TST_Person subclass, experimental") ]
class TST_PersonExp : TST_Person{
    string secondProperty = "empty";
    uint32 counter;
};

[Description(" TST_Person subclass")]
class TST_PersonSub : TST_Person{
    string secondProperty = "empty";
    uint32 counter;
    string ExperimentalProperty;
};

[Deprecated, Description(" TST_Person subclass deprecated ") ]
class TST_PersonDep : TST_Person{
    string secondProperty = "empty";
    uint32 counter;
};

[Deprecated, Description(" TST_Person subclass experimental property ") ]
class TST_PersonExpProperty : TST_Person{
    string secondProperty = "empty";
    [experimental]
    uint32 counter;
};

[Association, Description(" Lineage defines the relationship "
    "between parents and children.") ]
class TST_Lineage {
    [key] string InstanceID;
    TST_Person ref parent;
    TST_Person ref child;
};

[Association, Description(" Family gathers person to family.") ]
class TST_MemberOfFamilyCollection {
   [key] TST_Person ref family;
   [key] TST_Person ref member;
};


[Association, Experimental, Description(" Family gathers person to family. Experimental") ]
class TST_MemberOfFamilyCollectionExp {
   [key] TST_Person ref family;
   [key] TST_Person ref member;
};

[Association, Deprecated, Description(" Family gathers person to family. Deprecated") ]
class TST_MemberOfFamilyCollectionDep {
   [key] TST_Person ref family;
   [key] TST_Person ref member;
};
[ Description("Collection of Persons into a Family") ]
class TST_FamilyCollection {
        [Key, Description ("This is key prop and family name")]
    string name;
};

[Indication, Description("Indication class")]
class TST_Indication {
    string IndicationName;
};

[Indication, Experimental, Description("Indication class; experimental")]
class TST_IndicationExperimental {
    string IndicationName;
};

[Indication, Deprecated, Description("Indication class; deprecated")]
class TST_IndicationDeprecated {
    string IndicationName;
};

//
//  Define instances of the various classes
//

instance of TST_Person as $Mike { name = "Mike"; };
instance of TST_Person as $Saara { name = "Saara"; };
instance of TST_Person as $Sofi { name = "Sofi"; };
instance of TST_Person as $Gabi{ name = "Gabi"; };

instance of TST_PersonExp as $Mikesub{ name = "Mikesub";
                            secondProperty = "one" ;
                            counter = 1; };

instance of TST_PersonExp as $Saarasub { name = "Saarasub";
                            secondProperty = "two" ;
                            counter = 2; };

instance of TST_PersonExp as $Sofisub{ name = "Sofisub";
                            secondProperty = "three" ;
                            counter = 3; };

instance of TST_PersonExp as $Gabisub{ name = "Gabisub";
                            secondProperty = "four" ;
                            counter = 4; };

instance of TST_Lineage as $MikeSofi
{
    InstanceID = "MikeSofi";
    parent = $Mike;
    child = $Sofi;
};

instance of TST_Lineage as $MikeGabi
{
    InstanceID = "MikeGabi";
    parent = $Mike;
    child = $Gabi;
};

instance of TST_Lineage  as $SaaraSofi
{
    InstanceID = "SaaraSofi";
    parent = $Saara;
    child = $Sofi;
};

instance of TST_FamilyCollection as $Family1
{
    name = "family1";
};

instance of TST_FamilyCollection as $Family2
{
    name = "Family2";
};


instance of TST_MemberOfFamilyCollection as $SofiMember
{
    family = $Family1;
    member = $Sofi;
};

instance of TST_MemberOfFamilyCollection as $GabiMember
{
    family = $Family1;
    member = $Gabi;
};

instance of TST_MemberOfFamilyCollection as $MikeMember
{
    family = $Family2;
    member = $Mike;
};

instance of TST_MemberOfFamilyCollectionExp as $MikeMemberExp
{
    family = $Family1;
    member = $Mike;
};
